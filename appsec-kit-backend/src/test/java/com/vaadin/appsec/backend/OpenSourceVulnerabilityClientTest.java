/*-
 * Copyright (C) 2023 Vaadin Ltd
 *
 * This program is available under Vaadin Commercial License and Service Terms.
 *
 *
 * See <https://vaadin.com/commercial-license-and-service-terms> for the full license.
 */
package com.vaadin.appsec.backend;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.lang.reflect.Field;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLConnection;
import java.net.URLStreamHandler;
import java.net.URLStreamHandlerFactory;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import com.vaadin.appsec.backend.model.osv.request.QueryBatchRequestPayload;
import com.vaadin.appsec.backend.model.osv.response.OpenSourceVulnerability;
import com.vaadin.appsec.backend.model.osv.response.QueryBatchResponse;

import static org.junit.Assert.assertEquals;
import static org.mockito.Mockito.mock;

public class OpenSourceVulnerabilityClientTest {

    static class MockHttpURLConnection extends HttpURLConnection {
        protected MockHttpURLConnection(URL url) {
            super(url);
        }

        @Override
        public InputStream getInputStream() {
            return mockedInputStream;
        }

        @Override
        public OutputStream getOutputStream() {
            return mockedOutputStream;
        }

        @Override
        public void disconnect() {
        }

        @Override
        public boolean usingProxy() {
            return false;
        }

        @Override
        public void connect() {
        }
    }

    static class MockURLStreamHandler extends URLStreamHandler {
        private final HttpURLConnection mockHttpURLConnection;

        public MockURLStreamHandler(HttpURLConnection mockHttpURLConnection) {
            this.mockHttpURLConnection = mockHttpURLConnection;
        }

        @Override
        protected URLConnection openConnection(URL url) {
            return this.mockHttpURLConnection;
        }
    }

    static class MockURLStreamHandlerFactory
            implements URLStreamHandlerFactory {
        private final HttpURLConnection mockHttpURLConnection;

        public MockURLStreamHandlerFactory(
                HttpURLConnection mockHttpURLConnection) {
            this.mockHttpURLConnection = mockHttpURLConnection;
        }

        @Override
        public URLStreamHandler createURLStreamHandler(String protocol) {
            return new MockURLStreamHandler(this.mockHttpURLConnection);
        }
    }

    private static OpenSourceVulnerabilityClient osvClient;
    private static InputStream mockedInputStream;
    private static OutputStream mockedOutputStream;

    @Before
    public void setUp() {
        osvClient = new OpenSourceVulnerabilityClient(5);
        mockedOutputStream = mock(OutputStream.class);

        MockHttpURLConnection mockHttpURLConnection = new MockHttpURLConnection(
                null);
        MockURLStreamHandlerFactory mockURLStreamHandlerFactory = new MockURLStreamHandlerFactory(
                mockHttpURLConnection);
        URL.setURLStreamHandlerFactory(mockURLStreamHandlerFactory);
    }

    @Test
    public void queryBatch_returnsQueryBatchResponse() throws IOException {
        mockedInputStream = createInputStreamForResource(
                "vulnerabilities.json");

        QueryBatchResponse response = osvClient
                .queryBatch(new QueryBatchRequestPayload());

        assertEquals(3, response.getResults()[0].getVulnerabilityIds().length);
    }

    @Test
    public void queryVulnerability_returnsOpenSourceVulnerability()
            throws IOException {
        mockedInputStream = createInputStreamForResource("vulnerability.json");

        OpenSourceVulnerability vuln = osvClient
                .queryVulnerability("GHSA-493p-pfq6-5258");

        assertEquals("CVE-2023-1370", vuln.getAliases().get(0));
    }

    private InputStream createInputStreamForResource(String resource)
            throws IOException {
        URL url = getClass().getClassLoader().getResource(resource);
        if (url != null) {
            URLConnection connection = url.openConnection();
            return connection.getInputStream();
        } else {
            throw new RuntimeException("Resource not found");
        }
    }

    @After
    public void tearDown() throws NoSuchFieldException, IllegalAccessException {
        final Field factoryField = URL.class.getDeclaredField("factory");
        factoryField.setAccessible(true);
        factoryField.set(null, null);
    }
}
