/*-
 * Copyright (C) 2023 Vaadin Ltd
 *
 * This program is available under Vaadin Commercial License and Service Terms.
 *
 *
 * See <https://vaadin.com/commercial-license-and-service-terms> for the full license.
 */
package com.vaadin.appsec.backend;

import java.io.IOException;

import org.junit.Before;
import org.junit.Rule;
import org.junit.Test;
import org.mockserver.client.MockServerClient;
import org.mockserver.junit.MockServerRule;
import org.mockserver.model.MediaType;

import com.vaadin.appsec.backend.model.osv.request.QueryBatchRequestPayload;
import com.vaadin.appsec.backend.model.osv.response.OpenSourceVulnerability;
import com.vaadin.appsec.backend.model.osv.response.QueryBatchResponse;

import static org.junit.Assert.assertEquals;
import static org.mockserver.model.HttpRequest.request;
import static org.mockserver.model.HttpResponse.response;

public class OpenSourceVulnerabilityClientTest {

    @Rule
    public MockServerRule mockServerRule = new MockServerRule(this);

    private MockServerClient mockServerClient;

    private OpenSourceVulnerabilityClient osvClient;

    @Before
    public void setUp() {
        mockServerClient = mockServerRule.getClient();
        osvClient = new OpenSourceVulnerabilityClient(5) {

            @Override
            String getQueryBatchUrl() {
                return "http://localhost:" + mockServerRule.getPort()
                        + "/v1/querybatch";
            }

            @Override
            String getVulnerabilityUrl() {
                return "http://localhost:" + mockServerRule.getPort()
                        + "/v1/vulns/";
            }
        };
    }

    @Test
    public void queryBatch_returnsQueryBatchResponse() throws IOException {
        String vulnerabilities = new String(getClass().getClassLoader()
                .getResourceAsStream("vulnerabilities.json").readAllBytes());

        mockServerClient
                .when(request("/v1/querybatch").withMethod("POST")
                        .withContentType(MediaType.APPLICATION_JSON))
                .respond(response().withBody(vulnerabilities));

        QueryBatchResponse response = osvClient
                .queryBatch(new QueryBatchRequestPayload());

        assertEquals(3, response.getResults()[0].getVulnerabilityIds().length);
    }

    @Test
    public void queryVulnerability_returnsOpenSourceVulnerability()
            throws IOException {
        String vulnerability = new String(getClass().getClassLoader()
                .getResourceAsStream("vulnerability.json").readAllBytes());

        mockServerClient
                .when(request("/v1/vulns/GHSA-493p-pfq6-5258")
                        .withMethod("GET"))
                .respond(response().withBody(vulnerability));

        OpenSourceVulnerability vuln = osvClient
                .queryVulnerability("GHSA-493p-pfq6-5258");

        assertEquals("CVE-2023-1370", vuln.getAliases().get(0));
    }
}
