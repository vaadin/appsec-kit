/*-
 * Copyright (C) 2023 Vaadin Ltd
 *
 * This program is available under Vaadin Commercial License and Service Terms.
 *
 *
 * See <https://vaadin.com/commercial-license-and-service-terms> for the full license.
 */
package com.vaadin.appsec.backend;

import java.util.ArrayList;
import java.util.List;

import org.cyclonedx.model.Component;
import org.junit.Test;
import org.mockito.MockedConstruction;

import com.vaadin.appsec.backend.model.osv.response.OpenSourceVulnerability;
import com.vaadin.appsec.backend.model.osv.response.QueryBatchResponse;
import com.vaadin.appsec.backend.model.osv.response.VulnerabilityId;
import com.vaadin.appsec.backend.model.osv.response.VulnerabilityIdArray;

import static org.junit.Assert.assertEquals;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.mockConstruction;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

public class OpenSourceVulnerabilityServiceTest {

    @Test
    public void getVulnerabilities_returnsVulnerabilities() {
        try (MockedConstruction<OpenSourceVulnerabilityClient> mockedOsvClient = mockConstruction(
                OpenSourceVulnerabilityClient.class)) {
            OpenSourceVulnerabilityService osvService = new OpenSourceVulnerabilityService(
                    5);

            when(mockedOsvClient.constructed().get(0).queryBatch(any()))
                    .thenReturn(createQueryBatchResponse());
            when(mockedOsvClient.constructed().get(0).queryVulnerability(any()))
                    .thenReturn(new OpenSourceVulnerability());

            List<OpenSourceVulnerability> vulns = osvService
                    .getVulnerabilities(createComponentList());

            assertEquals(20, vulns.size());
            verify(mockedOsvClient.constructed().get(0), times(2))
                    .queryBatch(any());
            verify(mockedOsvClient.constructed().get(0), times(20))
                    .queryVulnerability(any());
        }
    }

    private QueryBatchResponse createQueryBatchResponse() {
        VulnerabilityId[] vulnIds = new VulnerabilityId[10];
        for (int i = 0; i < 10; i++) {
            vulnIds[i] = new VulnerabilityId();
        }
        VulnerabilityIdArray vulnArray = new VulnerabilityIdArray(vulnIds);
        VulnerabilityIdArray[] vulnArrays = new VulnerabilityIdArray[] {
                vulnArray };
        return new QueryBatchResponse(vulnArrays);
    }

    private List<Component> createComponentList() {
        List<Component> componentList = new ArrayList<>();
        for (int i = 0; i < 2000; i++) {
            Component component = new Component();
            component.setName("name" + i);
            component.setGroup("group" + i);
            componentList.add(component);
        }
        return componentList;
    }
}
