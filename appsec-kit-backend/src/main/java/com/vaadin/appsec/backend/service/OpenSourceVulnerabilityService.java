package com.vaadin.appsec.backend.service;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import java.util.stream.Collectors;

import org.cyclonedx.model.Component;

import com.vaadin.appsec.backend.model.osv.request.QueryBatchRequestPayload;
import com.vaadin.appsec.backend.model.osv.request.QueryRequestPayload;
import com.vaadin.appsec.backend.model.osv.response.VulnerabilityId;
import com.vaadin.appsec.backend.model.osv.response.Ecosystem;
import com.vaadin.appsec.backend.model.osv.response.OpenSourceVulnerability;
import com.vaadin.appsec.backend.model.osv.response.Package;
import com.vaadin.appsec.backend.model.osv.response.QueryBatchResponse;

public class OpenSourceVulnerabilityService {

    private final OpenSourceVulnerabilityClient osvClient = new OpenSourceVulnerabilityClient();

    public List<OpenSourceVulnerability> getVulnerabilities(List<Component> components) {
        List<OpenSourceVulnerability> vulnerabilities = new ArrayList<>();
        List<String> vulnerabilityIds = getVulnerabilityIds(components);

        vulnerabilityIds.forEach(id -> {
            Optional<OpenSourceVulnerability> vulnerability = osvClient.queryVulnerability(id);
            vulnerability.ifPresent(vulnerabilities::add);
        });

        return vulnerabilities;
    }

    private List<String> getVulnerabilityIds(List<Component> components) {
        final List<String> vulnerabilityIds = new ArrayList<>();
        QueryBatchRequestPayload payload = createQueryBatchRequestPayload(components);
        Optional<QueryBatchResponse> batchResponse = osvClient.queryBatch(payload);

        batchResponse.ifPresent(response -> vulnerabilityIds.addAll(
                Arrays.stream(response.getResults())
                        .filter(vulnerabilityIdArray -> vulnerabilityIdArray.getVulnerabilityIds() != null)
                        .flatMap(vulnerabilityIdArray -> Arrays.stream(vulnerabilityIdArray.getVulnerabilityIds())
                                .filter(Objects::nonNull))
                        .map(VulnerabilityId::getId)
                        .collect(Collectors.toList())));

        return vulnerabilityIds;
    }

    private QueryBatchRequestPayload createQueryBatchRequestPayload(List<Component> components) {
        return new QueryBatchRequestPayload(components.stream()
                .map(this::createQueryRequestPayload)
                .toArray(QueryRequestPayload[]::new));
    }

    private QueryRequestPayload createQueryRequestPayload(Component component) {
        return new QueryRequestPayload(component.getVersion(), createPackage(component));
    }

    private Package createPackage(Component component) {
        return new Package(Ecosystem.MAVEN.value(),
                component.getGroup().concat(":").concat(component.getName()));
    }
}
