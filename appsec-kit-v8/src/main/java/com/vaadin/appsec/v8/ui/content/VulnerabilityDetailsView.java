/*-
 * Copyright (C) 2023 Vaadin Ltd
 *
 * This program is available under Vaadin Commercial License and Service Terms.
 *
 *
 * See <https://vaadin.com/commercial-license-and-service-terms> for the full license.
 */

package com.vaadin.appsec.v8.ui.content;

import java.sql.Date;
import java.text.DateFormat;
import java.time.Instant;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import java.util.stream.Collectors;

import com.vaadin.appsec.backend.AppSecService;
import com.vaadin.appsec.backend.model.AppSecData;
import com.vaadin.appsec.backend.model.analysis.AffectedVersion;
import com.vaadin.appsec.backend.model.analysis.Assessment;
import com.vaadin.appsec.backend.model.analysis.AssessmentStatus;
import com.vaadin.appsec.backend.model.analysis.VulnerabilityDetails;
import com.vaadin.appsec.backend.model.dto.Dependency;
import com.vaadin.appsec.backend.model.dto.SeverityLevel;
import com.vaadin.appsec.backend.model.dto.Vulnerability;
import com.vaadin.data.HasValue;
import com.vaadin.icons.VaadinIcons;
import com.vaadin.shared.Version;
import com.vaadin.shared.ui.ContentMode;
import com.vaadin.shared.ui.MarginInfo;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.Component;
import com.vaadin.ui.CssLayout;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Label;
import com.vaadin.ui.Panel;
import com.vaadin.ui.TextArea;
import com.vaadin.ui.UI;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.ui.themes.ValoTheme;

/**
 * Vulnerability Details view content
 */
public class VulnerabilityDetailsView extends VerticalLayout {

    private final DateFormat dateFormatter = DateFormat
            .getDateInstance(DateFormat.DEFAULT, UI.getCurrent().getLocale());

    private final DateFormat dateTimeFormatter = DateFormat.getDateTimeInstance(
            DateFormat.DEFAULT, DateFormat.DEFAULT,
            UI.getCurrent().getLocale());
    private final Vulnerability vulnerabilityDTO;
    private final Runnable closeCallback;
    private Button saveButton;
    private ComboBox<AppSecData.VulnerabilityStatus> developerStatus;
    private TextArea developerAnalysis;
    private Label lastUpdated;

    public VulnerabilityDetailsView(Vulnerability vulnerabilityDTO,
            Runnable closeCallback) {
        this.vulnerabilityDTO = vulnerabilityDTO;
        this.closeCallback = closeCallback;
        setSizeFull();
        setMargin(false);
        addStyleName("vulnerability-details-view");
        buildHeaderBar();
        buildContent();
    }

    private void buildHeaderBar() {
        HorizontalLayout header = new HorizontalLayout();
        header.addStyleName("vulnerability-header");
        header.setDefaultComponentAlignment(Alignment.MIDDLE_LEFT);
        header.setWidth(100, Unit.PERCENTAGE);

        Button back = new Button(VaadinIcons.CHEVRON_LEFT);
        back.addStyleName(ValoTheme.BUTTON_ICON_ONLY);
        back.addStyleName(ValoTheme.BUTTON_BORDERLESS);
        back.addClickListener(e -> {
            closeCallback.run();
        });

        Label vulnerabilityTitle = new Label(vulnerabilityDTO.getIdentifier());
        vulnerabilityTitle.addStyleName("vulnerability-title");
        header.addComponents(back, vulnerabilityTitle);
        header.setExpandRatio(vulnerabilityTitle, 1);

        addComponent(header);
    }

    private void buildContent() {
        // Base details layout
        Component leftContent = buildLeftContent();
        Component rightContent = buildRightContent();
        HorizontalLayout content = new HorizontalLayout(leftContent,
                rightContent);
        content.setExpandRatio(leftContent, 1);
        content.setSizeFull();
        content.addStyleName("vulnerability-details-content-panel");
        addComponentsAndExpand(content);
    }

    private Component buildLeftContent() {
        // Left side of details layout
        VerticalLayout left = new VerticalLayout();
        left.addStyleName("vulnerability-details-content-left");
        left.setMargin(new MarginInfo(false, true, false, false));

        // Description
        Label vuDescTitle = new Label("Vulnerability description");
        vuDescTitle.addStyleName("vulnerability-desc-title");
        vuDescTitle.setWidth(100, Unit.PERCENTAGE);
        Label vuDesc = new Label(vulnerabilityDTO.getDetails());
        vuDesc.setContentMode(ContentMode.HTML);
        vuDesc.setWidth(100, Unit.PERCENTAGE);
        vuDesc.addStyleName("vaadin-analysis-desc");

        // References
        Label refTitle = new Label("References");
        refTitle.addStyleName("references-title");
        refTitle.setWidth(100, Unit.PERCENTAGE);
        List<Label> links = vulnerabilityDTO.getReferenceUrls().stream()
                .map(url -> {
                    Label link = new Label("<a href=\"" + url
                            + "\" target=\"_blank\">" + url + "</a>");
                    link.setContentMode(ContentMode.HTML);
                    link.setWidth(100, Unit.PERCENTAGE);
                    return link;
                }).collect(Collectors.toList());

        left.addComponent(buildProperties());
        left.addComponent(buildVaadinAnalysis());
        left.addComponents(vuDescTitle, vuDesc, refTitle);
        links.forEach(left::addComponent);

        // Wrapper for left content
        Panel leftPanel = new Panel(left);
        leftPanel.setSizeFull();
        leftPanel.addStyleName(ValoTheme.PANEL_BORDERLESS);

        return leftPanel;
    }

    private Component buildRightContent() {
        // Right side of details layout
        VerticalLayout right = new VerticalLayout();
        right.addStyleName("vulnerability-details-content-right");
        right.addStyleName("small-margin");
        right.setMargin(true);
        right.setHeight(100, Unit.PERCENTAGE);
        right.setWidth(400, Unit.PIXELS);

        Label devTitle = new Label("Developer analysis");
        devTitle.addStyleName("developer-analysis-title");
        devTitle.setWidth(100, Unit.PERCENTAGE);
        right.addComponent(devTitle);

        Label devDesc = new Label(
                "You can declare a status for this vulnerability if you have done some analysis on this vulnerability or want to perform an analysis on this vulnerability.");
        devDesc.setWidth(100, Unit.PERCENTAGE);
        devDesc.addStyleName("developer-analysis-desc");
        right.addComponent(devDesc);

        developerStatus = new ComboBox<>();
        developerStatus.setItems(AppSecData.VulnerabilityStatus.NOT_SET,
                AppSecData.VulnerabilityStatus.NOT_AFFECTED,
                AppSecData.VulnerabilityStatus.FALSE_POSITIVE,
                AppSecData.VulnerabilityStatus.IN_TRIAGE,
                AppSecData.VulnerabilityStatus.EXPLOITABLE);
        developerStatus.setPlaceholder("Select status");
        developerStatus.setWidth(100, Unit.PERCENTAGE);
        developerStatus.setCaption("Vulnerability status");
        developerStatus.setValue(vulnerabilityDTO.getDeveloperStatus());
        developerStatus.setEmptySelectionAllowed(false);
        developerStatus.addValueChangeListener(this::devValueChange);
        right.addComponent(developerStatus);

        developerAnalysis = new TextArea("Description (optional)");
        developerAnalysis.setPlaceholder(
                "Add a description that describes the state of this vulnerability");
        developerAnalysis.setWidth(100, Unit.PERCENTAGE);
        if (vulnerabilityDTO.getDeveloperAnalysis() != null) {
            developerAnalysis.setValue(vulnerabilityDTO.getDeveloperAnalysis());
        }
        developerAnalysis.addValueChangeListener(this::devValueChange);
        right.addComponentsAndExpand(developerAnalysis);

        String timestamp = vulnerabilityDTO.getDeveloperUpdated() == null ? "-"
                : dateTimeFormatter.format(
                        Date.from(vulnerabilityDTO.getDeveloperUpdated()));
        lastUpdated = new Label("Last updated: " + timestamp);
        right.addComponent(lastUpdated);

        saveButton = new Button("Save");
        saveButton.setEnabled(false);
        saveButton.addStyleName(ValoTheme.BUTTON_PRIMARY);
        saveButton.addClickListener(this::save);

        right.addComponent(saveButton);
        right.setComponentAlignment(saveButton, Alignment.BOTTOM_RIGHT);

        return right;
    }

    private void devValueChange(HasValue.ValueChangeEvent<?> event) {
        saveButton.setEnabled(!Objects.equals(
                vulnerabilityDTO.getDeveloperStatus(),
                developerStatus.getValue())
                || !Objects.equals(vulnerabilityDTO.getDeveloperAnalysis(),
                        developerAnalysis.getValue()));
    }

    private Component buildVaadinAnalysis() {
        VerticalLayout vAnalysisPanel = new VerticalLayout();
        vAnalysisPanel.addStyleName("vaadin-analysis-panel");
        vAnalysisPanel.addStyleName("small-margin");

        Label vaTitle = new Label("Vaadin analysis");
        vaTitle.addStyleName("vaadin-analysis-title");
        vaTitle.setWidth(100, Unit.PERCENTAGE);
        vAnalysisPanel.addComponent(vaTitle);

        String vaadinVersion = Version.getFullVersion();
        AppSecService appsec = AppSecService.getInstance();
        List<String> fw8Versions = appsec.getSupportedFramework8Versions();
        boolean isSupportedVaadinVersion = fw8Versions.contains(vaadinVersion);

        Label vaStatus = new Label();
        Label vaDesc = new Label();
        if (!isSupportedVaadinVersion) {
            vaStatus.setValue("Not Provided");
            vaStatus.addStyleName("va-not-supported");
            vaDesc.setValue("This app is running with Vaadin " + vaadinVersion
                    + " which is not currently getting security updates. Please "
                    + " upgrade to one of the latest maintained versions: "
                    + String.join(", ", fw8Versions));
        } else {
            vaStatus.addStyleName("va-under-review");
            Optional<AffectedVersion> optionalAssessment = getAssessment();
            if (optionalAssessment.isPresent()) {
                AffectedVersion assessment = optionalAssessment.get();
                AssessmentStatus status = assessment.getStatus();
                String comment = assessment.getComment();
                vaStatus.setValue(status.getCaption());
                vaDesc.setValue(comment);
            } else {
                vaStatus.setValue("Not Available");
                vaDesc.setValue(
                        "This vulnerability has not yet been assessed by "
                                + "the Vaadin Security Team. Please check later for updates.");
            }
        }
        vAnalysisPanel.addComponent(vaStatus);

        vaDesc.addStyleName("vaadin-analysis-desc");
        vaDesc.setWidth(100, Unit.PERCENTAGE);
        vAnalysisPanel.addComponent(vaDesc);

        return vAnalysisPanel;
    }

    private Optional<AffectedVersion> getAssessment() {
        String vulnerabilityId = vulnerabilityDTO.getIdentifier();
        VulnerabilityDetails vulnerability = AppSecService.getInstance()
                .getVulnerabilityAnalysis().getVulnerabilities()
                .get(vulnerabilityId);
        if (vulnerability == null) {
            return Optional.empty();
        }
        Dependency dependency = vulnerabilityDTO.getDependency();
        String parentBomRef = dependency.getParentBomRef();
        String groupAndName = bomRefToGroupAndName(parentBomRef);
        Assessment assessment = vulnerability.getAssessments()
                .get(groupAndName);
        if (assessment == null) {
            return Optional.empty();
        }
        return assessment.getAffectedVersions().values().stream()
                .filter(v -> v.isInRange(bomRefToVersion(parentBomRef)))
                .findFirst();
    }

    private String bomRefToGroupAndName(String bomRef) {
        // pkg:maven/com.vaadin/vaadin-server@8.13.0?type=jar
        String[] bomRefParts = bomRef.split("/");
        String[] depParts = bomRefParts[2].split("@");
        return bomRefParts[1] + ":" + depParts[0];
    }

    private String bomRefToVersion(String bomRef) {
        // pkg:maven/com.vaadin/vaadin-server@8.13.0?type=jar
        String[] bomRefParts = bomRef.split("/");
        String[] depParts = bomRefParts[2].split("@");
        String[] verAndType = depParts[1].split("\\?");
        return verAndType[0];
    }

    private Component buildProperties() {
        CssLayout properties = new CssLayout();
        properties.setWidth(100, Unit.PERCENTAGE);

        properties.addComponent(buildLabel("Dependency",
                vulnerabilityDTO.getDependency().toString()));
        properties.addComponent(buildLabel("Risk rating",
                String.valueOf(vulnerabilityDTO.getRiskScore())));
        properties.addComponent(buildLabel("Vulnerability status", "---"));
        properties.addComponent(buildLabel("Time of detection",
                dateFormatter.format(vulnerabilityDTO.getDatePublished())));
        SeverityLevel severityLevel = vulnerabilityDTO.getSeverityLevel();
        Component severity = buildLabel("Severity", severityLevel
                + (SeverityLevel.NA == severityLevel ? "" : " severity"));
        severity.addStyleName(
                "severity-" + vulnerabilityDTO.getSeverityLevel().name());
        properties.addComponent(severity);

        return properties;
    }

    private Component buildLabel(String caption, String value) {
        Label l = new Label(value);
        l.setCaption(caption);
        l.addStyleName("vulnerability-property");
        HorizontalLayout hl = new HorizontalLayout(l);
        hl.addStyleName("vulnerability-details-prop-holder");
        hl.setSizeUndefined();
        return hl;
    }

    private void save(Button.ClickEvent clickEvent) {
        // Defaults to NOT_SET if not given by user
        if (developerStatus.getValue() == null) {
            developerStatus.setValue(AppSecData.VulnerabilityStatus.NOT_SET);
        }

        String id = vulnerabilityDTO.getIdentifier();
        AppSecData data = AppSecService.getInstance().getData();

        AppSecData.VulnerabilityAssessment vulnerability = data
                .getVulnerabilities().get(id);
        if (vulnerability == null) {
            vulnerability = new AppSecData.VulnerabilityAssessment();
        }
        vulnerability.setId(id);
        vulnerability.setStatus(developerStatus.getValue());
        vulnerability.setDeveloperAnalysis(developerAnalysis.getValue());

        Instant now = Instant.now();
        vulnerability.setUpdated(now);

        // Save new values through service
        data.getVulnerabilities().put(id, vulnerability);
        AppSecService.getInstance().setData(data);

        // Update UI
        lastUpdated.setValue(
                "Last updated: " + dateTimeFormatter.format(Date.from(now)));
        saveButton.setEnabled(false);
    }
}
