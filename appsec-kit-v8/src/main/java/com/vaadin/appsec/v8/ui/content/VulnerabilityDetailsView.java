/*-
 * Copyright (C) 2023 Vaadin Ltd
 *
 * This program is available under Vaadin Commercial License and Service Terms.
 *
 *
 * See <https://vaadin.com/commercial-license-and-service-terms> for the full license.
 */

package com.vaadin.appsec.v8.ui.content;

import java.text.DateFormat;
import java.util.List;
import java.util.stream.Collectors;

import com.vaadin.appsec.v8.data.VulnerabilityDTO;
import com.vaadin.icons.VaadinIcons;
import com.vaadin.shared.ui.ContentMode;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.Component;
import com.vaadin.ui.CssLayout;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Label;
import com.vaadin.ui.Panel;
import com.vaadin.ui.TextArea;
import com.vaadin.ui.UI;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.ui.themes.ValoTheme;

/**
 * Vulnerability Details view content
 */
public class VulnerabilityDetailsView extends VerticalLayout {

    private final VulnerabilityDTO vulnerabilityDTO;
    private final Runnable closeCallback;

    public VulnerabilityDetailsView(VulnerabilityDTO vulnerabilityDTO,
            Runnable closeCallback) {
        this.vulnerabilityDTO = vulnerabilityDTO;
        this.closeCallback = closeCallback;
        setSizeFull();
        setMargin(false);
        addStyleName("vulnerability-details-view");
        buildHeaderBar();
        buildContent();
    }

    private void buildHeaderBar() {
        HorizontalLayout header = new HorizontalLayout();
        header.addStyleName("vulnerability-header");
        header.setDefaultComponentAlignment(Alignment.MIDDLE_LEFT);
        header.setWidth(100, Unit.PERCENTAGE);

        Button back = new Button(VaadinIcons.CHEVRON_LEFT);
        back.addStyleName(ValoTheme.BUTTON_ICON_ONLY);
        back.addStyleName(ValoTheme.BUTTON_BORDERLESS);
        back.addClickListener(e -> {
            closeCallback.run();
        });

        Label vulnerabilityTitle = new Label(vulnerabilityDTO.getIdentifier());
        vulnerabilityTitle.addStyleName("vulnerability-title");
        header.addComponents(back, vulnerabilityTitle);
        header.setExpandRatio(vulnerabilityTitle, 1);

        addComponent(header);
    }

    private void buildContent() {
        // Base details layout
        Component leftContent = buildLeftContent();
        Component rightContent = buildRightContent();
        HorizontalLayout content = new HorizontalLayout(leftContent,
                rightContent);
        content.setExpandRatio(leftContent, 1);
        content.setSizeFull();
        content.addStyleName("vulnerability-details-content-panel");
        addComponentsAndExpand(content);
    }

    private Component buildLeftContent() {
        // Left side of details layout
        VerticalLayout left = new VerticalLayout();
        left.addStyleName("vulnerability-details-content-left");
        left.setMargin(false);

        // Description
        Label vuDescTitle = new Label("Vulnerability description");
        vuDescTitle.addStyleName("vulnerability-desc-title");
        vuDescTitle.setWidth(100, Unit.PERCENTAGE);
        Label vuDesc = new Label(vulnerabilityDTO.getDetails());
        vuDesc.setContentMode(ContentMode.HTML);
        vuDesc.setWidth(100, Unit.PERCENTAGE);
        vuDesc.addStyleName("vaadin-analysis-desc");

        // References
        Label refTitle = new Label("References");
        refTitle.addStyleName("references-title");
        refTitle.setWidth(100, Unit.PERCENTAGE);
        List<Label> links = vulnerabilityDTO.getReferenceUrls().stream()
                .map(url -> {
                    Label link = new Label("<a href=\"" + url
                            + "\" target=\"_blank\">" + url + "</a>");
                    link.setContentMode(ContentMode.HTML);
                    return link;
                }).collect(Collectors.toList());

        left.addComponents(buildProperties(), buildVaadinAnalysis(),
                vuDescTitle, vuDesc, refTitle);
        links.forEach(left::addComponent);

        // Wrapper for left content
        Panel leftPanel = new Panel(left);
        leftPanel.setSizeFull();
        leftPanel.addStyleName(ValoTheme.PANEL_BORDERLESS);

        return leftPanel;
    }

    private Component buildRightContent() {
        // Right side of details layout
        VerticalLayout right = new VerticalLayout();
        right.addStyleName("vulnerability-details-content-right");
        right.addStyleName("small-margin");
        right.setMargin(true);
        right.setHeight(100, Unit.PERCENTAGE);
        right.setWidth(400, Unit.PIXELS);

        Label devTitle = new Label("Developer analysis");
        devTitle.addStyleName("developer-analysis-title");
        devTitle.setWidth(100, Unit.PERCENTAGE);
        right.addComponent(devTitle);

        Label devDesc = new Label(
                "You can declare a status for this vulnerability if you have done some analysis on this vulnerability or want to perform an analysis on this vulnerability.");
        devDesc.setWidth(100, Unit.PERCENTAGE);
        devDesc.addStyleName("developer-analysis-desc");
        right.addComponent(devDesc);

        // TODO Needs to be replaced with actual values when available
        ComboBox<String> devStatus = new ComboBox<>();
        devStatus.setEnabled(false);
        devStatus.setPlaceholder("Select status");
        devStatus.setWidth(100, Unit.PERCENTAGE);
        devStatus.setCaption("Vulnerability status");
        right.addComponent(devStatus);

        TextArea desc = new TextArea("Description (optional)");
        desc.setEnabled(false);
        desc.setPlaceholder(
                "Add a description that describes the state of this vulnerability");
        desc.setWidth(100, Unit.PERCENTAGE);
        right.addComponentsAndExpand(desc);

        Button saveButton = new Button("Save");
        // TODO Handle enabled state based on changes to fields above
        saveButton.setEnabled(false);
        saveButton.addStyleName(ValoTheme.BUTTON_PRIMARY);
        // TODO Handle save event when backend supports it
        right.addComponent(saveButton);
        right.setComponentAlignment(saveButton, Alignment.BOTTOM_RIGHT);

        return right;
    }

    private Component buildVaadinAnalysis() {
        VerticalLayout vAnalysisPanel = new VerticalLayout();
        vAnalysisPanel.addStyleName("vaadin-analysis-panel");
        vAnalysisPanel.addStyleName("small-margin");

        Label vaTitle = new Label("Vaadin analysis");
        vaTitle.addStyleName("vaadin-analysis-title");
        vaTitle.setWidth(100, Unit.PERCENTAGE);
        vAnalysisPanel.addComponent(vaTitle);

        // TODO Replace with real data when available
        Label vaStatus = new Label("False positive");
        vaStatus.addStyleName("va-false-positive");
        vAnalysisPanel.addComponent(vaStatus);

        // TODO Replace with real data when available
        Label vaDesc = new Label(
                "This is a Vaadin dependency vulnerability and the status has been set based on Vaadin's analysis. Stet sale indoctum nec ea, at cum movet tritani. Id qui dolor graecis deserunt. No legendos conclusionemque mel, eum ea duis audire docendi. In ludus suscipiantur eos. No mel nemore utamur, errem patrioque vix ne.");
        vaDesc.setWidth(100, Unit.PERCENTAGE);
        vaDesc.addStyleName("vaadin-analysis-desc");
        vAnalysisPanel.addComponent(vaDesc);

        return vAnalysisPanel;
    }

    private Component buildProperties() {
        CssLayout properties = new CssLayout();
        properties.setWidth(100, Unit.PERCENTAGE);

        DateFormat formatter = DateFormat.getDateInstance(DateFormat.DEFAULT,
                UI.getCurrent().getLocale());
        properties.addComponent(buildLabel("Dependency",
                vulnerabilityDTO.getDependency().toString()));
        properties.addComponent(buildLabel("Risk rating",
                String.valueOf(vulnerabilityDTO.getRiskScore())));
        properties.addComponent(buildLabel("Vulnerability status", "---"));
        properties.addComponent(buildLabel("Time of detection",
                formatter.format(vulnerabilityDTO.getDatePublished())));
        Component severity = buildLabel("Severity",
                vulnerabilityDTO.getSeverityLevel().toString() + " severity");
        severity.addStyleName(
                "severity-" + vulnerabilityDTO.getSeverityLevel().name());
        properties.addComponent(severity);

        return properties;
    }

    private Component buildLabel(String caption, String value) {
        Label l = new Label(value);
        l.setCaption(caption);
        l.addStyleName("vulnerability-property");
        HorizontalLayout hl = new HorizontalLayout(l);
        hl.addStyleName("vulnerability-details-prop-holder");
        hl.setSizeUndefined();
        return hl;
    }
}
