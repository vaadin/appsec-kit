package com.vaadin.appsec.service;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import java.util.stream.Collectors;

import com.vaadin.appsec.model.osv.request.QueryBatchRequestPayload;
import com.vaadin.appsec.model.osv.request.QueryRequestPayload;
import com.vaadin.appsec.model.osv.response.Ecosystem;
import com.vaadin.appsec.model.osv.response.OpenSourceVulnerability;
import com.vaadin.appsec.model.osv.response.Package;
import com.vaadin.appsec.model.osv.response.QueryBatchResponse;
import com.vaadin.appsec.model.osv.response.VulnerabilityId;
import com.vaadin.server.ServiceInitEvent;
import com.vaadin.server.VaadinServiceInitListener;

public class VulnerabilityStoreInitListener implements VaadinServiceInitListener {

    @Override
    public void serviceInit(ServiceInitEvent event) {
        VulnerabilityStore.getInstance().init(getVulnerabilities());
    }

    private List<OpenSourceVulnerability> getVulnerabilities() {
        List<OpenSourceVulnerability> vulnerabilities = new ArrayList<>();
        OpenSourceVulnerabilityService osvService = new OpenSourceVulnerabilityService();

        Optional<QueryBatchResponse> batchResponse = osvService.queryBatch(queryBatchRequestPayload());

        batchResponse.ifPresent(response -> {
            List<String> vulnerabilityIds = Arrays.stream(response.getResults())
                    .filter(vulnerabilityIdArray -> vulnerabilityIdArray.getVulnerabilityIds() != null)
                    .flatMap(vulnerabilityIdArray -> Arrays.stream(vulnerabilityIdArray.getVulnerabilityIds())
                            .filter(Objects::nonNull))
                    .map(VulnerabilityId::getId)
                    .collect(Collectors.toList());

            vulnerabilityIds.forEach(id -> {
                Optional<OpenSourceVulnerability> vulnerability = osvService.getVulnerability(id);
                vulnerability.ifPresent(vulnerabilities::add);
            });
        });

        return vulnerabilities;
    }

    private QueryBatchRequestPayload queryBatchRequestPayload() {
        QueryRequestPayload[] queries = BillOfMaterialsStore.getInstance().getBom().getComponents().stream()
                .map(component -> new QueryRequestPayload(
                        component.getVersion(),
                        new Package(Ecosystem.MAVEN.value(), component.getGroup() + ":" + component.getName())))
                .toArray(QueryRequestPayload[]::new);
        return new QueryBatchRequestPayload(queries);
    }
}
